from django.db import migrations

# Ключ - название источника, значение - список кортежей (текст цитаты, вес).
INITIAL_QUOTES = {
    "Крёстный отец": [
        (
            "Я собираюсь сделать ему предложение, от которого он не сможет отказаться.",
            150,
        ),
        ("Держи своих друзей близко, но врагов ещё ближе.", 120),
    ],
    "Терминатор": [
        ("I'll be back.", 200),
    ],
    "Терминатор 2: Судный день": [
        ("Hasta la vista, baby.", 200),
    ],
    "Форрест Гамп": [
        (
            "Мама всегда говорила: «Жизнь как коробка шоколадных конфет. Никогда не знаешь, какая начинка попадётся».",
            180,
        ),
    ],
    "Волшебник страны Оз": [
        ("Тото, у меня такое ощущение, что мы больше не в Канзасе.", 100),
        ("Нет ничего лучше, чем быть дома.", 100),
    ],
    "Бойцовский клуб": [
        (
            "Мы ходим на работу, которую ненавидим, чтобы купить вещи, которые нам не нужны.",
            130,
        ),
        ("Первое правило Бойцовского клуба: не упоминать о Бойцовском клубе.", 130),
    ],
    "Сияние": [
        ("А вот и Джонни!", 150),
    ],
    "Уолл-стрит": [
        ("Жадность, за отсутствием более подходящего слова, это хорошо.", 110),
    ],
    "Титаник": [
        ("Я король мира!", 160),
        ("Если ты прыгаешь — я прыгаю, помнишь?", 120),
    ],
    "Мастер и Маргарита": [
        (
            "Что бы делало твое добро, если бы не существовало зла, и как бы выглядела земля, если бы с нее исчезли тени?",
            140,
        ),
        (
            "Никогда и ничего не просите! Никогда и ничего, и в особенности у тех, кто сильнее вас. Сами предложат и сами все дадут!",
            140,
        ),
    ],
    "Гарри Поттер и философский камень": [
        (
            "Требуется немалое мужество, чтобы противостоять врагам. Но еще больше мужества нужно, чтобы противостоять друзьям.",
            170,
        ),
    ],
    "Три мушкетера": [
        ("Часто преступление для одного становится позором для другого.", 80),
    ],
    "Евгений Онегин": [
        ("Я вас люблю, чего же боле...", 90),
    ],
    "Друзья": [
        ("У тебя есть минутка? — Да хоть две… я же на работе.", 100),
    ],
    "Один дома": [
        ("Когда я вырасту и женюсь, то буду жить один!", 110),
    ],
    "Богатый папа, бедный папа": [
        (
            "Для победителей поражение становится источником вдохновения. Для неудачников поражение означает крушение надежд.",
            80,
        ),
    ],
}


def add_initial_quotes(apps, schema_editor):
    """
    Итеративное добавление источников и цитат в БД.
    """
    Source = apps.get_model("quotes", "Source")
    Quote = apps.get_model("quotes", "Quote")

    for source_name, quotes_list in INITIAL_QUOTES.items():
        source_obj, _ = Source.objects.get_or_create(name=source_name)

        for quote_text, weight_val in quotes_list:
            has_quote = Quote.objects.filter(text=quote_text).exists()
            if not has_quote:
                Quote.objects.create(
                    source=source_obj, text=quote_text, weight=weight_val
                )


def remove_initial_quotes(apps, schema_editor):
    """
    Эта функция будет вызвана при откате миграции (для чистоты).
    """
    Source = apps.get_model("quotes", "Source")
    for source_name in INITIAL_QUOTES.keys():
        Source.objects.filter(name=source_name).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("quotes", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(add_initial_quotes, reverse_code=remove_initial_quotes),
    ]
